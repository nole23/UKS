# import json
# from django.http import response
# from django.test import TestCase, Client
# from django.urls import reverse
# from django.core.files.base import ContentFile
# from datetime import datetime
# from rest_framework.test import APIRequestFactory
# from rest_framework.request import Request

# from users.models import Files, User, Root_Tree, Project, Role, List_Project_User


# def login():
#     c = Client()
#     response = c.post('#/api/sing-up',
#                       {'email': 'test@gmail.com', 'password': '123'}, format='json')
#     print("response =     ", response)
#     return json.loads(response.content.decode("UTF-8"))["data"]["jwt"]


# def test_db():
#     role1 = Role.objects.create(role_name="O")
#     role2 = Role.objects.create(role_name="C")
#     role3 = Role.objects.create(role_name="V")
#     role1.save()
#     role2.save()
#     role3.save()

#     user1 = User.objects.create(first_name="Test1", last_name="Test1",
#                                 email="test1@gmail.com", username="test1", password="123")
#     user2 = User.objects.create(first_name="Test2", last_name="Test2",
#                                 email="test2@gmail.com", username="test2", password="123")
#     user3 = User.objects.create(first_name="Test3", last_name="Test3",
#                                 email="test3@gmail.com", username="test3", password="123")
#     user1.save()
#     user2.save()
#     user3.save()


# class RepositoryTest(TestCase):
#     def setUp(self):
#         test_db()

#     def test_login(self):
#         factory = APIRequestFactory()
#         request = factory.post('/#/api/sing-up',
#                                {'email': 'test@gmail.com', 'password': '123'}, format='json')
#         context = {'request': Request(request)}
#         print(context)

#     # def test_post_save(self):

#     #     user = User.objects.get(username="test")

#     #     title = 'README.md'
#     #     text = 'Generated by Git v1.0.0 on ' + str(datetime.now())
#     #     content = ContentFile(text)
#     #     content.name = 'master/' + title

#     #     files = Files.objects.create(
#     #         name=title, cover=content, dateCreate=datetime.now(), user=user)

#     #     rootTree = Root_Tree.objects.create(
#     #         name_branch='master', date_create=datetime.now(), user_create=user)
#     #     rootTree.files.add(files)

#     #     project = Project.objects.create(name=self.data['name'], description=self.data['description'], date_create=datetime.now(
#     #     ), type_project=self.data['type_project'])
#     #     project.root_tree.add(rootTree)

#     #     role = Role.objects.get(id=1)

#     #     lpu = List_Project_User.objects.create(
#     #         project=project, user=user, role=role)

#     #     self.assertEqual(files.name, title)
#     #     self.assertEqual(rootTree.name_branch, 'master')
#     #     self.assertEqual(project.name, self.data['name'])
#     #     self.assertEqual(lpu.project, project)

#     def get_test(self):
#         pass
