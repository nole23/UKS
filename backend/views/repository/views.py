from rest_framework.views import APIView
from common.utils import token_required_class, create_json_response, read_file, projectSerialize
from users.models import User, Role, Issue, Files, Root_Tree, Project, List_Project_User, Issue_Comment
from datetime import datetime, timedelta
from django.core.files.base import ContentFile
import json
from django.core import serializers

# Create your views here.


class Repository(APIView):

    @token_required_class
    def get(self, request, id):
        listProject = List_Project_User.objects.filter(project_id=id)
        project = listProject[0].project

        issues = Issue.objects.filter(project=project.id)
        projectRest = projectSerialize(project, issues, listProject)

        return create_json_response({"message": "SUCCESS", "project": projectRest}, status=200)

    @token_required_class
    def post(self, request):
        data_unicode = request.body.decode('utf-8')
        data_json = json.loads(data_unicode)

        title = 'README.md'
        text = 'Generated by Git v1.0.0 on ' + str(datetime.now())
        content = ContentFile(text)
        content.name = 'master/' + title

        files = Files.objects.create(
            name=title, cover=content, dateCreate=datetime.now(), user=request._user)

        rootTree = Root_Tree.objects.create(
            name_branch='master', date_create=datetime.now(), user_create=request._user)
        rootTree.files.add(files)

        project = Project.objects.create(name=data_json['name'], description=data_json['description'], date_create=datetime.now(
        ), type_project=data_json['type_project'])
        project.root_tree.add(rootTree)

        role = Role.objects.get(id=1)

        List_Project_User.objects.create(
            project=project, user=request._user, role=role)

        return create_json_response({"message": "SUCCESS", "project": str(project.id)}, status=200)

    def put(self, request):
        pass

    def delete(self, request):
        pass
